using System;

#if !DEBUG
//[System.Diagnostics.DebuggerStepThrough]
#endif
public static class Templates
{

    internal static string GEN_WARGING = @"// ****** SPEED ******
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
";

    #region DATACLASSTEMPLATE

    internal const string DATACLASSTEMPLATE_USING =

@"using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using Speed;
using Speed.Data;
";

    public const string DATACLASSTEMPLATE_CODE =

@"
[Serializable]
public partial class [ClassName] : DataClass
{

//    public Record CreateInstance()
//    {
//        return new [TypeName]();
//    }

    private void readRecord(DbDataReader dr, ref [TypeName] value)
    {
        value.RecordStatus = RecordStatus.Existing;
[SetColumns]
    }

    private void readRecordSql(DbDataReader dr, List<string> names, ref [TypeName] value)
    {
        value.RecordStatus = RecordStatus.Existing;
[SetColumnsSql]
    }

    private List<[TypeName]> readReader(Database db, string sql, bool updatable)
    {
        using (DbDataReader dr = db.ExecuteReader(sql))
        {
            List<[TypeName]> list = new List<[TypeName]>();
            while (dr.Read())
            {
                [TypeName] value = new [TypeName]();
                readRecord(dr, ref value);
//                if (updatable)
//                {
//                    [TypeName] old = new [TypeName]();
//                    readRecord(dr, ref old);
//                    value.Original = old;
//                }
                list.Add(value);
            }
            return list;
        }
    }

    private List<[TypeName]> readReader(Database db, string sql, bool updatable, params Parameter[] parameters)
    {
        using (DbDataReader dr = db.ExecuteReader(sql, parameters))
        {
            List<[TypeName]> list = new List<[TypeName]>();
            while (dr.Read())
            {
                [TypeName] value = new [TypeName]();
                readRecord(dr, ref value);
//                if (updatable)
//                {
//                    [TypeName] old = new [TypeName]();
//                    readRecord(dr, ref old);
//                    value.Original = old;
//                }
                list.Add(value);
            }
            return list;
        }
    }

    private [TypeName] readReaderSingle(Database db, string sql, bool updatable)
    {
        [TypeName] value = null;
        using (DbDataReader dr = db.ExecuteReader(sql))
        {
            List<[TypeName]> list = new List<[TypeName]>();
            if (dr.Read())
            {
                value = new [TypeName]();
                readRecord(dr, ref value);
//                if (updatable)
//                {
//                    [TypeName] old = new [TypeName]();
//                    readRecord(dr, ref old);
//                    value.Original = old;
//                }
            }
            return value;
        }
    }

    private [TypeName] readReaderSingle(Database db, string sql, Parameter[] parameters)
    {
        [TypeName] value = null;
        using (DbDataReader dr = db.ExecuteReader(sql, parameters))
        {
            List<[TypeName]> list = new List<[TypeName]>();
            if (dr.Read())
            {
                value = new [TypeName]();
                readRecord(dr, ref value);
            }
            return value;
        }
    }

    private List<[TypeName]> readReaderSql(Database db, string sql, bool updatable)
    {
        using (DbDataReader dr = db.ExecuteReader(sql))
        {
            List<[TypeName]> list = new List<[TypeName]>();
            // pega os nomes das colunas continas no sql
            List<string> names = new List<string>();
            for (int i = 0; i < dr.FieldCount; i++)
                names.Add(dr.GetName(i));
            while (dr.Read())
            {
                [TypeName] value = new [TypeName]();
                readRecordSql(dr, names, ref value);
//                if (updatable)
//                {
//                    [TypeName] old = new [TypeName]();
//                    readRecordSql(dr, names, ref old);
//                    value.Original = old;
//                }
                list.Add(value);
            }
            return list;
        }
    }

    private List<[TypeName]> select(Database db, bool updatable)
    {
        string sql = '[Sql]';
        return readReader(db, sql, updatable);
    }

    private List<[TypeName]> select(Database db, string where, bool updatable)
    {
        string sql;
        if (string.IsNullOrWhiteSpace(where))
            sql = '[Sql]';
        else
            sql = '[Sql] where ' + where;
        return readReader(db, sql, updatable);
    }

    private List<[TypeName]> select(Database db, string where, params Parameter[] parameters)
    {
        string sql = '[Sql] where ' + where;
        return readReader(db, sql, false, parameters);
    }

    private List<[TypeName]> select(Database db, string where, bool updatable, params Parameter[] parameters)
    {
        string sql = '[Sql] where ' + where;
        return readReader(db, sql, updatable, parameters);
    }

    private List<[TypeName]> selectTop(Database db, int top, bool updatable)
    {
        // string sql = string.Format('[SqlTop]', top);
        string sql = '[Sql]';
        sql = db.Provider.SetTop(sql, top);
        return readReader(db, sql, updatable);
    }

    private List<[TypeName]> selectTop(Database db, int top, string where, bool updatable)
    {
        string sql;
        if (string.IsNullOrWhiteSpace(where))
            sql = '[Sql]';
        else
            sql = '[Sql] where ' + where;
        sql = db.Provider.SetTop(sql, top);
        return readReader(db, sql, updatable);
    }

    private long count(Database db, string where)
    {
        string sql;
        if (string.IsNullOrWhiteSpace(where))
            sql = '[SqlCount]';
        else
            sql = '[SqlCount] where ' + where;
        return db.ExecuteInt64(sql);
    }

    private List<[TypeName]> selectColumns(Database db, bool updatable, params string[] columns)
    {
        string sql = 'select ' + Concat(', ', columns) + ' from [TableName]';
        return readReaderSql(db, sql, updatable);
    }

    private List<[TypeName]> selectColumns(Database db, string where, bool updatable, params string[] columns)
    {
        string sql;
        if (string.IsNullOrWhiteSpace(where))
            sql = 'select ' + Concat(', ', columns) + ' from [TableName] ';
        else
            sql = 'select ' + Concat(', ', columns) + ' from [TableName] where ' + where;
        return readReaderSql(db, sql, updatable);
    }

    private [TypeName] selectSingle(Database db, bool updatable)
    {
        string sql = '[Sql]';
        return readReaderSingle(db, sql, updatable);
    }

    private [TypeName] selectSingle(Database db, string where, bool updatable)
    {
        string sql;
        if (string.IsNullOrWhiteSpace(where))
            sql = '[Sql]';
        else
            sql = '[Sql] where ' + where;
        return readReaderSingle(db, sql, updatable);
    }

    private bool selectByPk(Database db, object instance, bool updatable)
    {
        [TypeName] value = ([TypeName])instance;
        string sql = '[Sql] where [WhereParameters]';
        using (DbCommand cmd = db.NewCommand(sql))
        {
[SetParametersWithIdentity]
            using (DbDataReader dr = db.ExecuteReader(sql))
            {
                if (dr.Read())
                {
                    readRecord(dr, ref value);
//                    if (updatable)
//                    {
//                        [TypeName] old = new [TypeName]();
//                        readRecord(dr, ref old);
//                        value.Original = old;
//                    }
                    return true;
                }
                else
                    return false;
            }
        }
    }

    private int insert(Database db, object instance)
    {
        [INSERT]
    }

    private int insertRequery(Database db, object instance)
    {
        [INSERT_REQUERY];
    }

    public override int Update(Database db, object instance)
    {
        return update(db, instance);
    }

    public override int Update(Database db, object instance, EnumSaveMode saveMode)
    {
        if (saveMode == EnumSaveMode.None)
            return update(db, instance);
        else
            return updateRequery(db, instance);
    }

    private int update(Database db, object instance)
    {
        [TypeName] value = ([TypeName])instance;
        string sql = 'update [TableName] set [UpdateColumns] where [WhereOldParameters]';
        using (DbCommand cmd = db.NewCommand(sql))
        {
[SetParametersWithIdentity]
            [TypeName] old = value.Original != null ? ([TypeName])value.Original : value;
[SetOldParameters]
            return db.ExecuteNonQuery(cmd);
        }
    }

    private int updateRequery(Database db, object instance)
    {
        [UPDATE_REQUERY]
    }

    public override int Truncate(Database db)
    {
        string sql = 'truncate table [TableName]';
        using (DbCommand cmd = db.NewCommand(sql))
            return db.ExecuteNonQuery(cmd);
    }

    public override int Delete(Database db)
    {
        string sql = 'delete from [TableName]';
        using (DbCommand cmd = db.NewCommand(sql))
            return db.ExecuteNonQuery(cmd);
    }

    public override int Delete(Database db, object instance)
    {
        [TypeName] value = ([TypeName])instance;
        string sql = 'delete from [TableName] where [WhereOldParameters]';
        using (DbCommand cmd = db.NewCommand(sql))
        {
            [TypeName] old = value.Original != null ? ([TypeName])value.Original : value;
[SetOldParameters]
            return db.ExecuteNonQuery(cmd);
        }
    }

    public override int Delete(Database db, string where)
    {
        string sql = 'delete from [TableName] where ' + where;
        using (DbCommand cmd = db.NewCommand(sql))
            return db.ExecuteNonQuery(cmd);
    }

    public override int Delete(Database db, string where, params Parameter[] parameters)
    {
        string sql = 'delete from [TableName] where ' + where;
        using (DbCommand cmd = db.NewCommand(sql))
            return db.ExecuteNonQuery(cmd, parameters);
    }

    public override int Delete(Database db, string where, int commandTimeout, params Parameter[] parameters)
    {
        string sql = 'delete from [TableName] where ' + where;
        using (DbCommand cmd = db.NewCommand(sql, commandTimeout))
            return db.ExecuteNonQuery(cmd, parameters);
    }

    public override int Save(Database db, object instance)
    {
        [TypeName] value = ([TypeName])instance;
        if (value.RecordStatus == RecordStatus.Existing)
            return update(db, value);
        else if (value.RecordStatus == RecordStatus.New)
            return insert(db, value);
        else // if (value.RecordStatus == RecordStatus.Deleted)
            return Delete(db, value);
    }

    public override int Save(Database db, object instance, EnumSaveMode saveMode)
    {
        [TypeName] value = ([TypeName])instance;
        if (value.RecordStatus == RecordStatus.Existing)
            return Update(db, value, saveMode);
        else if (value.RecordStatus == RecordStatus.New)
            return Insert(db, value, saveMode);
        else // if (value.RecordStatus == RecordStatus.Deleted)
            return Delete(db, value);
    }

    public override void SaveList(Database db, object instance, EnumSaveMode saveMode, bool continueOnError)
    {
        List<[TypeName]> values = (List<[TypeName]>)instance;
        bool isTran = db.UsingTransaction;

        if (!isTran)
            db.BeginTransaction();

        foreach ([TypeName] value in values)
        {
            try
            {
                Save(db, value, saveMode);
            }
            catch (Exception ex)
            {
                if (!continueOnError)
                {
                    db.Rollback();
                    throw ex;
                 }
            }
        }

        if (!isTran)
            db.Commit();
    }

    public override int DeleteAll(Database db, object[] instance)
    {
        return 1;
    }

    public override object Select(Database db)
    {
        return select(db, false);
    }

    public override object Select(Database db, bool updatable)
    {
        return select(db, updatable);
    }

    public override object Select(Database db, string where)
    {
        return select(db, where, false);
    }

    public override object Select(Database db, string where, bool updatable)
    {
        return select(db, where, updatable);
    }

    public override object Select(Database db, string where, params Parameter[] parameters)
    {
        return select(db, where, false, parameters);
    }

    public override object SelectTop(Database db, int top)
    {
        return selectTop(db, top, false);
    }

    public override object SelectTop(Database db, int top, bool updatable)
    {
        return selectTop(db, top, updatable);
    }

    public override object SelectTop(Database db, int top, string where)
    {
        return selectTop(db, top, where, false);
    }

    public override object SelectTop(Database db, int top, string where, bool updatable)
    {
        return selectTop(db, top, where, updatable);
    }

    public override long Count(Database db)
    {
        return count(db, null);
    }

    public override long Count(Database db, string where)
    {
        return count(db, where);
    }

    public override object SelectColumns(Database db, bool updatable, params string[] columns)
    {
        return selectColumns(db, updatable, columns);
    }

    public override object SelectColumns(Database db, string where, bool updatable, params string[] columns)
    {
        return selectColumns(db, where, updatable, columns);
    }

    public override object SelectSingle(Database db)
    {
        return selectSingle(db, false);
    }

    public override object SelectSingle(Database db, bool updatable)
    {
        return selectSingle(db, updatable);
    }

    public override object SelectSingle(Database db, string where)
    {
        return selectSingle(db, where, false);
    }

    public override object SelectSingle(Database db, string where, bool updatable)
    {
        return selectSingle(db, where, updatable);
    }

    public override object SelectSingle(Database db, string where, params Parameter[] parameters)
    {
        string sql = '[Sql] where ' + where;
        return readReaderSingle(db, sql, parameters);
    }

    public override object SelectArray(Database db)
    {
        return select(db, false);
    }

    public override object SelectArray(Database db, bool updatable)
    {
        return select(db, updatable).ToArray();
    }

    public override object SelectArray(Database db, string where)
    {
        return select(db, where, false);
    }

    public override object SelectArray(Database db, string where, bool updatable)
    {
        return select(db, where, updatable).ToArray();
    }

    public override string SelectToJson(Database db)
    {
        return SelectToJson(db, false);
    }

    public override string SelectToJson(Database db, bool updatable)
    {
        return SerializeToJson<[TypeName]>(select(db, updatable));
    }

    public override string SelectToJson(Database db, string where)
    {
        return SelectToJson(db, where, false);
    }

    public override string SelectToJson(Database db, string where, bool updatable)
    {
        return SerializeToJson<[TypeName]>(select(db, where, updatable));
    }

    public override object Query(Database db, string sql)
    {
        return readReaderSql(db, sql, false);
    }

    public override object Query(Database db, string sql, bool updatable)
    {
        return readReaderSql(db, sql, updatable);
    }

    public override bool SelectByPk(Database db, object instance)
    {
        return selectByPk(db, instance, true);
    }

    public override bool SelectByPk(Database db, object instance, bool updatable)
    {
        return selectByPk(db, instance, updatable);
    }

    public override string UpdateFromJson(Database db, string json, EnumSaveMode saveMode)
    {
        [TypeName] rec = DeserializeFromJson<[TypeName]>(json);
        Update(db, rec, saveMode);
        return SerializeToJson<[TypeName]>(rec);
    }

    public override string SaveFromJson(Database db, string json, EnumSaveMode saveMode)
    {
        [TypeName] rec = DeserializeFromJson<[TypeName]>(json);
        Save(db, rec, saveMode);
        return SerializeToJson<[TypeName]>(rec);
    }

    public override string SaveListFromJson(Database db, string json, EnumSaveMode saveMode, bool continueOnError)
    {
        List<[TypeName]> rec = DeserializeFromJson<List<[TypeName]>>(json);
        SaveList(db, rec, saveMode, continueOnError);
        return SerializeToJson<List<[TypeName]>>(rec);
    }

    public override int Insert(Database db, object instance)
    {
        return insert(db, instance);
    }

    public override int Insert(Database db, object instance, EnumSaveMode saveMode)
    {
        if (saveMode == EnumSaveMode.None)
            return insert(db, instance);
        else
            return insertRequery(db, instance);
    }

    public static string Concat(string endSeparator, params object[] values)
    {
        return Concat(null, endSeparator, values);
    }

    public static string Concat(string beforeSeparator, string endSeparator, params object[] values)
    {
        System.Text.StringBuilder text = new System.Text.StringBuilder();
        for (int i = 0; i < values.Length; i++)
        {
            if (beforeSeparator != null)
                text.Append(beforeSeparator);
            text.Append(values[i].ToString());
            if (i < values.Length - 1 && endSeparator != null)
                text.Append(endSeparator);
        }
        return text.ToString();
    }

    public override int InsertXml(Database db, object instance, EnumSaveMode saveMode = EnumSaveMode.None)
    {
[InsertXml]
    }

}
";

    #endregion DATACLASSTEMPLATE

    #region RECORD_TEMPLATE

    public const string RECORD_TEMPLATE =
@"using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel;
using Speed;
using Speed.Data;
[UsingAdd]

namespace [NameSpace]
{

    [DbTable([SchemaName], '[TableName]', '[SequenceColumn]', '[SequenceName]')]
    [Serializable]
    [DataContract(Name = '[ClassName]', Namespace = '')]
//    [System.Diagnostics.DebuggerStepThrough]
    public partial class [ClassName] : Record, ICloneable, INotifyPropertyChanged
    {

[Columns]        
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion

        #region IsEqual

        public bool IsEqual([ClassName] value)
        {
            if (value == null)
                return false;
            return
[ColumnsIsEqual]
        }

        #endregion IsEqual

        #region Clone

        public override object Clone()
        {
            return CloneT();
        }

        public [ClassName] CloneT()
        {
            [ClassName] value = new [ClassName]();
            value.RecordStatus = this.RecordStatus;
            value.RecordTag = this.RecordTag;

[ColumnsClone]
            return value;
        }

        #endregion Clone

        #region Create

        public static [ClassName] Create([CreateParams])
        {
            [ClassName] __value = new [ClassName]();

[CreateColumns]
            return __value;
        }

        #endregion Create

   }

}
";
    #endregion RECORD_TEMPLATE

    #region RECORD_EXT_TEMPLATE

    public const string RECORD_EXT_TEMPLATE =
@"using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel;
using Speed;
using Speed.Data;

namespace [NameSpace]
{

    public partial class [ClassName]
    {

    }

}
";
    #endregion RECORD_EXT_TEMPLATE

    #region RECORD_COLUMN_TEMPLATE

    public const string RECORD_COLUMN_TEMPLATE =
@"        private [DataType] z_[PopertyName];
        [DbColumn('[ColumnName]')]
        [DataMember]
        public [DataType] [PopertyName]
        {
            get { return z_[PopertyName]; }
            set
            {
                if (z_[PopertyName] != value)
                {
                    z_[PopertyName] = value;
                    this.RaisePropertyChanged('[PopertyName]');
                }
            }
        }

";

    public const string RECORD_COLUMN_TEMPLATE2 =
@"        [DbColumn('[ColumnName]')]
        public [DataType] [PopertyName] { get; set; }

";

    public const string RECORD_COLUMN_TEMPLATE_IDENTITY =
@"
        private [DataType] z_[ColumnName];

        [DbColumn('[ColumnName]')]
        public [DataType] [ColumnName]
        {
            get { return z_[ColumnName]; }
        }";

    #endregion RECORD_COLUMN_TEMPLATE

    #region BL_TEMPLATE

    public const string BL_TEMPLATE =
@"using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using Speed.Data;
using [NameSpaceEntity];
[UsingAdd]
namespace [NameSpaceBL]
{

    //[System.Diagnostics.DebuggerStepThrough]
    public partial class [BLName] : BLClass<[NameSpaceEntity].[Entity]>
    {

[SelectByPk]
[DeleteByPk]
[ParentRelations]
[ChildRelations]
    }

}
";

    public const string BL_TEMPLATE_SELECT_BY_PK =
@"        public static [NameSpaceEntity].[Entity] SelectByPk(Database db, [PkDeclaration])
        {
            return db.SelectSingle<[NameSpaceEntity].[Entity]>(string.Format('[PkColumnsWhere]', [PkColumnsValue]));
        }
";

    public const string BL_TEMPLATE_DELETE_BY_PK =
@"        public static int DeleteByPk(Database db, [PkDeclaration])
        {
            return db.Delete<[NameSpaceEntity].[Entity]>(string.Format('[PkColumnsWhere]', [PkColumnsValue]));
        }
";

    public const string BL_TEMPLATE_SELECT_BY_PARENT_RELATIONS =
@"        public static [NameSpaceEntity].[ForeignEntity] Select_Parent_[MethodName](Database db, [FkDeclaration])
        {
            return db.SelectSingle<[NameSpaceEntity].[ForeignEntity]>(string.Format('[FkColumnsWhere]', [FkColumnsValue]));
        }
        public static [NameSpaceEntity].[ForeignEntity] Select_Parent_[MethodName](Database db, [NameSpaceEntity].[ClassName] rec)
        {
            return Select_Parent_[MethodName](db, [FkColumnsValueEntity]);
        }
";

    public const string BL_TEMPLATE_SELECT_BY_CHILD_RELATIONS =
@"        public static List<[NameSpaceEntity].[ForeignEntity]> Select_Children_[MethodName](Database db, [FkDeclaration])
        {
            return db.Select<[NameSpaceEntity].[ForeignEntity]>(string.Format('[FkColumnsWhere]', [FkColumnsValue]));
        }

        public static List<[NameSpaceEntity].[ForeignEntity]> Select_Children_[MethodName](Database db, [NameSpaceEntity].[ClassName] rec)
        {
            return Select_Children_[MethodName](db, [FkColumnsValueEntity]);
        }
";

    #endregion BL_TEMPLATE

    #region BL_EXT_TEMPLATE

    public const string BL_EXT_TEMPLATE =
@"using System;
using System.Collections.Generic;
using System.Data;
using Speed.Data;
using [NameSpaceEntity];

namespace [NameSpaceBL]
{

    public partial class [BLName]
    {

    }

}
";

    #endregion BL_EXT_TEMPLATE

    #region DATA_ENUM_TEMPLATE

    public const string ENUM_TEMPLATE =
@"    public enum [EnumName] : [Type]
	{
[EnumColumns]
    }
";

    public const string ENUM_CLASS_TEMPLATE =
@"using System;

namespace [NameSpace]
{

[EnumCode]
}
";
    #endregion DATA_ENUM_TEMPLATE

    /*
     * DeleteAll
        StringBuilder b = new StringBuilder();
        string sql = @'delete from TableTeste where Id = @OldId';
        using (DbCommand cmd = db.NewCommand(sql))
        {
            for (int i = 0; i < instances.Length; i++ )
            {
                DAL.TableTeste value = (DAL.TableTeste)instances[i];
                DAL.TableTeste old = value.Original != null ? (DAL.TableTeste)value.Original : value;
                string parName = '@Old' + i;
                b.AppendLine(sql.Replace('@Old', parName));
                cmd.Parameters.AddWithValue(parName, old.Id);
            }
            cmd.CommandText = b.ToString();
            return db.ExecuteNonQuery(cmd);
        }
*/

    #region PROCEDURE_TEMPLATE

    public const string PROCEDURE_TEMPLATE_USING =
@"using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Speed;
using Speed.Data;

namespace [NameSpace]
{
";

    public const string PROCEDURE_TEMPLATE_RECORD =
@"
    [DbProcedure('[ProcedureName]')]
    [Serializable]
    public partial class [TableName] : Record
    {

[Columns]

    }
";

    public const string PROCEDURE_TEMPLATE_COMMAND_LIST =
@"
        List<[ProcedureNameRecord]> [MethodName](Database db, [ProcedureParameters], int commandTimeout = db.CommandTimeout)
        {
            List<[ReturnTypeName]> list = new List<ReturnTypeName>();
            using (DbCommand cmd = db.NewCommand('[ProcedureName]', commandTimeout, CommandType.StoredProcedure))
            {
[SetParameters]
                while (reader.Read())
                {
                    [ReturnTypeName] rec = new [ReturnTypeName];
[SetReadParameters]
                return list.Add(rec);
            }
            return list;
        }
";

    // AddWithValue(DbCommand cmd, string parameterName, DbType dbType, ParameterDirection direction, object value, int size = 0)
    public const string PROCEDURE_TEMPLATE_PARAMETER =
        "\t\t\t\tAddParameter(cmd, '[ParameterName]', [DbType], [ParameterDirection], rec.[PropertyName]);\r\n";
    
    public const string PROCEDURE_TEMPLATE_PARAMETER_SIZE =
        "\t\t\t\tAddParameter(cmd, '[ParameterName]', [DbType], [ParameterDirection], rec.[PropertyName], [Size]);\r\n";

    #endregion PROCEDURE_TEMPLATE

}