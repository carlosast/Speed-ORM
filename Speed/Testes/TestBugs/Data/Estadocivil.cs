// ****** SPEED ******
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel;
using Speed;
using Speed.Data;


namespace TesteRaizen.Data
{

    [DbTable("dbo", "EstadoCivil", "", "")]
    [Serializable]
    [DataContract(Name = "EstadoCivil", Namespace = "")]
//    [System.Diagnostics.DebuggerStepThrough]
    public partial class EstadoCivil : Record, ICloneable, INotifyPropertyChanged
    {

        private Int32 z_IdEstadoCivil;
        [DbColumn("IdEstadoCivil")]
        [DataMember]
        public Int32 IdEstadoCivil
        {
            get { return z_IdEstadoCivil; }
            set
            {
                if (z_IdEstadoCivil != value)
                {
                    z_IdEstadoCivil = value;
                    this.RaisePropertyChanged("IdEstadoCivil");
                }
            }
        }

        private String z_DescEstadoCivil;
        [DbColumn("DescEstadoCivil")]
        [DataMember]
        public String DescEstadoCivil
        {
            get { return z_DescEstadoCivil; }
            set
            {
                if (z_DescEstadoCivil != value)
                {
                    z_DescEstadoCivil = value;
                    this.RaisePropertyChanged("DescEstadoCivil");
                }
            }
        }

        
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion

        #region IsEqual

        public bool IsEqual(EstadoCivil value)
        {
            if (value == null)
                return false;
            return
				this.IdEstadoCivil == value.IdEstadoCivil &&
				this.DescEstadoCivil == value.DescEstadoCivil;

        }

        #endregion IsEqual

        #region Clone

        public override object Clone()
        {
            return CloneT();
        }

        public EstadoCivil CloneT()
        {
            EstadoCivil value = new EstadoCivil();
            value.RecordStatus = this.RecordStatus;
            value.RecordTag = this.RecordTag;

			value.IdEstadoCivil = this.IdEstadoCivil;
			value.DescEstadoCivil = this.DescEstadoCivil;

            return value;
        }

        #endregion Clone

        #region Create

        public static EstadoCivil Create(Int32 _IdEstadoCivil, String _DescEstadoCivil)
        {
            EstadoCivil __value = new EstadoCivil();

			__value.IdEstadoCivil = _IdEstadoCivil;
			__value.DescEstadoCivil = _DescEstadoCivil;

            return __value;
        }

        #endregion Create

   }

}
