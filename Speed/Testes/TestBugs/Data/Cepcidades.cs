// ****** SPEED ******
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel;
using Speed;
using Speed.Data;


namespace TesteRaizen.Data
{

    [DbTable("dbo", "CepCidades", "", "")]
    [Serializable]
    [DataContract(Name = "CepCidades", Namespace = "")]
//    [System.Diagnostics.DebuggerStepThrough]
    public partial class CepCidades : Record, ICloneable, INotifyPropertyChanged
    {

        private Int32 z_IdCidade;
        [DbColumn("IdCidade")]
        [DataMember]
        public Int32 IdCidade
        {
            get { return z_IdCidade; }
            set
            {
                if (z_IdCidade != value)
                {
                    z_IdCidade = value;
                    this.RaisePropertyChanged("IdCidade");
                }
            }
        }

        private String z_UF;
        [DbColumn("UF")]
        [DataMember]
        public String UF
        {
            get { return z_UF; }
            set
            {
                if (z_UF != value)
                {
                    z_UF = value;
                    this.RaisePropertyChanged("UF");
                }
            }
        }

        private String z_NomeCidade;
        [DbColumn("NomeCidade")]
        [DataMember]
        public String NomeCidade
        {
            get { return z_NomeCidade; }
            set
            {
                if (z_NomeCidade != value)
                {
                    z_NomeCidade = value;
                    this.RaisePropertyChanged("NomeCidade");
                }
            }
        }

        private String z_Cep;
        [DbColumn("Cep")]
        [DataMember]
        public String Cep
        {
            get { return z_Cep; }
            set
            {
                if (z_Cep != value)
                {
                    z_Cep = value;
                    this.RaisePropertyChanged("Cep");
                }
            }
        }

        
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion

        #region IsEqual

        public bool IsEqual(CepCidades value)
        {
            if (value == null)
                return false;
            return
				this.IdCidade == value.IdCidade &&
				this.UF == value.UF &&
				this.NomeCidade == value.NomeCidade &&
				this.Cep == value.Cep;

        }

        #endregion IsEqual

        #region Clone

        public override object Clone()
        {
            return CloneT();
        }

        public CepCidades CloneT()
        {
            CepCidades value = new CepCidades();
            value.RecordStatus = this.RecordStatus;
            value.RecordTag = this.RecordTag;

			value.IdCidade = this.IdCidade;
			value.UF = this.UF;
			value.NomeCidade = this.NomeCidade;
			value.Cep = this.Cep;

            return value;
        }

        #endregion Clone

        #region Create

        public static CepCidades Create(Int32 _IdCidade, String _UF, String _NomeCidade, String _Cep)
        {
            CepCidades __value = new CepCidades();

			__value.IdCidade = _IdCidade;
			__value.UF = _UF;
			__value.NomeCidade = _NomeCidade;
			__value.Cep = _Cep;

            return __value;
        }

        #endregion Create

   }

}
