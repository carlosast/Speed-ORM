// ****** SPEED ******
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel;
using Speed;
using Speed.Data;


namespace TesteRaizen.Data
{

    [DbTable("dbo", "Nacionalidade", "", "")]
    [Serializable]
    [DataContract(Name = "Nacionalidade", Namespace = "")]
//    [System.Diagnostics.DebuggerStepThrough]
    public partial class Nacionalidade : Record, ICloneable, INotifyPropertyChanged
    {

        private Int32 z_IdNacionalidade;
        [DbColumn("IdNacionalidade")]
        [DataMember]
        public Int32 IdNacionalidade
        {
            get { return z_IdNacionalidade; }
            set
            {
                if (z_IdNacionalidade != value)
                {
                    z_IdNacionalidade = value;
                    this.RaisePropertyChanged("IdNacionalidade");
                }
            }
        }

        private String z_DescNacionalidade;
        [DbColumn("DescNacionalidade")]
        [DataMember]
        public String DescNacionalidade
        {
            get { return z_DescNacionalidade; }
            set
            {
                if (z_DescNacionalidade != value)
                {
                    z_DescNacionalidade = value;
                    this.RaisePropertyChanged("DescNacionalidade");
                }
            }
        }

        
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion

        #region IsEqual

        public bool IsEqual(Nacionalidade value)
        {
            if (value == null)
                return false;
            return
				this.IdNacionalidade == value.IdNacionalidade &&
				this.DescNacionalidade == value.DescNacionalidade;

        }

        #endregion IsEqual

        #region Clone

        public override object Clone()
        {
            return CloneT();
        }

        public Nacionalidade CloneT()
        {
            Nacionalidade value = new Nacionalidade();
            value.RecordStatus = this.RecordStatus;
            value.RecordTag = this.RecordTag;

			value.IdNacionalidade = this.IdNacionalidade;
			value.DescNacionalidade = this.DescNacionalidade;

            return value;
        }

        #endregion Clone

        #region Create

        public static Nacionalidade Create(Int32 _IdNacionalidade, String _DescNacionalidade)
        {
            Nacionalidade __value = new Nacionalidade();

			__value.IdNacionalidade = _IdNacionalidade;
			__value.DescNacionalidade = _DescNacionalidade;

            return __value;
        }

        #endregion Create

   }

}
