// ****** SPEED ******
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel;
using Speed;
using Speed.Data;


namespace TestGen.PostgreSQL.Data
{

    [DbTable("Speed", "SaleDetail", "", "")]
    [Serializable]
    [DataContract(Name = "Saledetail", Namespace = "")]
//    [System.Diagnostics.DebuggerStepThrough]
    public partial class Saledetail : Record, ICloneable, INotifyPropertyChanged
    {

        private Int32 z_DetailId;
        [DbColumn("Detail_Id")]
        [DataMember]
        public Int32 DetailId
        {
            get { return z_DetailId; }
            set
            {
                if (z_DetailId != value)
                {
                    z_DetailId = value;
                    this.RaisePropertyChanged("DetailId");
                }
            }
        }

        private Int32 z_DetSaleId;
        [DbColumn("Det_Sale_Id")]
        [DataMember]
        public Int32 DetSaleId
        {
            get { return z_DetSaleId; }
            set
            {
                if (z_DetSaleId != value)
                {
                    z_DetSaleId = value;
                    this.RaisePropertyChanged("DetSaleId");
                }
            }
        }

        
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion

        #region IsEqual

        public bool IsEqual(Saledetail value)
        {
            if (value == null)
                return false;
            return
				this.DetailId == value.DetailId &&
				this.DetSaleId == value.DetSaleId;

        }

        #endregion IsEqual

        #region Clone

        public override object Clone()
        {
            return CloneT();
        }

        public Saledetail CloneT()
        {
            Saledetail value = new Saledetail();
            value.RecordStatus = this.RecordStatus;
            value.RecordTag = this.RecordTag;

			value.DetailId = this.DetailId;
			value.DetSaleId = this.DetSaleId;

            return value;
        }

        #endregion Clone

        #region Create

        public static Saledetail Create(Int32 _DetailId, Int32 _DetSaleId)
        {
            Saledetail __value = new Saledetail();

			__value.DetailId = _DetailId;
			__value.DetSaleId = _DetSaleId;

            return __value;
        }

        #endregion Create

   }

}
